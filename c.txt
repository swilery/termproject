IDENTIFER -> q | w | e | r | t | y | u | i | o | p | a | s | d | f | g | h | j | k | l | z | x | c | v | b | n | m
CONSTANT -> q | w | e | r | t | y | u | i | o | p | a | s | d | f | g | h | j | k | l | z | x | c | v | b | n | m
STRING-LITERAL -> q | w | e | r | t | y | u | i | o | p | a | s | d | f | g | h | j | k | l | z | x | c | v | b | n | m
PRIMARY-EXPRESSION -> IDENTIFIER | CONSTANT | STRING-LITERAL | ( EXPRESSION )
POSTFIX-EXPRESSION -> PRIMARY-EXPRESSION | POSTFIX-EXPRESSION [ EXPRESSION ] | POSTFIX-EXPRESSION ( ) | POSTFIX-EXPRESSION ( ARGUMENT-EXPRESSION-LIST ) | POSTFIX-EXPRESSION . IDENTIFIER | POSTFIX-EXPRESSION -> IDENTIFIER | POSTFIX-EXPRESSION ++ | POSTFIX-EXPRESSION --
ARGUMENT-EXPRESSION-LIST -> ASSIGNMENT-EXPRESSION | ARGUMENT-EXPRESSION-LIST , ASSIGNMENT-EXPRESSION
UNARY-EXPRESSION -> POSTFIX-EXPRESSION | ++ UNARY-EXPRESSION | -- UNARY-EXPRESSION | UNARY-OPERATOR CAST-EXPRESSION | sizeof UNARY-EXPRESSION | sizeof ( TYPE-NAME )
UNARY-OPERATOR -> & | * | + | - | ~ | !
CAST-EXPRESSION -> UNARY-EXPRESSION | ( TYPE-NAME ) CAST-EXPRESSION
MULTIPLICATIVE-EXPRESSION -> CAST-EXPRESSION | MULTIPLICATIVE-EXPRESSION * CAST-EXPRESSION | MULTIPLICATIVE-EXPRESSION / CAST-EXPRESSION | MULTIPLICATIVE-EXPRESSION % CAST-EXPRESSION
ADDITIVE-EXPRESSION -> MULTIPLICATIVE-EXPRESSION | ADDITIVE-EXPRESSION + MULTIPLICATIVE-EXPRESSION | ADDITIVE-EXPRESSION - MULTIPLICATIVE-EXPRESSION
SHIFT-EXPRESSION -> ADDITIVE-EXPRESSION | SHIFT-EXPRESSION << ADDITIVE-EXPRESSION | SHIFT-EXPRESSION >> ADDITIVE-EXPRESSION
RELATIONAL-EXPRESSION -> SHIFT-EXPRESSION | RELATIONAL-EXPRESSION < SHIFT-EXPRESSION | RELATIONAL-EXPRESSION > SHIFT-EXPRESSION | RELATIONAL-EXPRESSION <= SHIFT-EXPRESSION | RELATIONAL-EXPRESSION >= SHIFT-EXPRESSION
EQUALITY-EXPRESSION -> RELATIONAL-EXPRESSION | EQUALITY-EXPRESSION == RELATIONAL-EXPRESSION | EQUALITY-EXPRESSION != RELATIONAL-EXPRESSION
AND-EXPRESSION -> EQUALITY-EXPRESSION | AND-EXPRESSION & EQUALITY-EXPRESSION
EXCLUSIVE-OR-EXPRESSION -> AND-EXPRESSION | EXCLUSIVE-OR-EXPRESSION ^ AND-EXPRESSION
INCLUSIVE-OR-EXPRESSION -> EXCLUSIVE-OR-EXPRESSION | INCLUSIVE-OR-EXPRESSION | EXCLUSIVE-OR-EXPRESSION
LOGICAL-AND-EXPRESSION -> INCLUSIVE-OR-EXPRESSION | LOGICAL-AND-EXPRESSION && INCLUSIVE-OR-EXPRESSION
LOGICAL-OR-EXPRESSION -> LOGICAL-AND-EXPRESSION | LOGICAL-OR-EXPRESSION || LOGICAL-AND-EXPRESSION
CONDITIONAL-EXPRESSION -> LOGICAL-OR-EXPRESSION | LOGICAL-OR-EXPRESSION ? EXPRESSION : CONDITIONAL-EXPRESSION
ASSIGNMENT-EXPRESSION -> CONDITIONAL-EXPRESSION | UNARY-EXPRESSION ASSIGNMENT-OPERATOR ASSIGNMENT-EXPRESSION
ASSIGNMENT-OPERATOR -> = | *= | /= | %= | += | -= | <<= | >>= | &= | ^= | |=
EXPRESSION -> ASSIGNMENT-EXPRESSION | EXPRESSION , ASSIGNMENT-EXPRESSION
CONSTANT-EXPRESSION -> CONDITIONAL-EXPRESSION
DECLARATION -> DECLARATION-SPECIFIERS ; | DECLARATION-SPECIFIERS INIT-DECLARATOR-LIST ;
DECLARATION-SPECIFIERS -> STORAGE-CLASS-SPECIFIER | TYPE-SPECIFIER | TYPE-QUALIFIER | STORAGE-CLASS-SPECIFIER DECLARATION-SPECIFIERS | TYPE-SPECIFIER DECLARATION-SPECIFIERS | TYPE-QUALIFIER DECLARATION-SPECIFIERS
INIT-DECLARATOR-LIST -> INIT-DECLARATOR | INIT-DECLARATOR-LIST , INIT-DECLARATOR
INIT-DECLARATOR -> DECLARATOR | DECLARATOR = INITIALIZER
STORAGE-CLASS-SPECIFIER -> typedef | extern | static | auto | register
TYPE-SPECIFIER -> void | char | short | int | long | float | double | signed | unsigned | STRUCT-OR-UNION-SPECIFIER | ENUM-SPECIFIER | TYPEDEF-NAME
STRUCT-OR-UNION-SPECIFIER | STRUCT-OR-UNION { STRUCT-DECLARATION-LIST } | STRUCT-OR-UNION IDENTIFIER { STRUCT-DECLARATION-LIST } | STRUCT-OR-UNION IDENTIFIER
STRUCT-OR-UNION -> struct | union
STRUCT-DECLARATION-LIST -> STRUCT-DECLARATION | STRUCT-DECLARATION-LIST STRUCT-DECLARATION
STRUCT-DECLARATION -> SPECIFIER-QUALIFIER-LIST STRUCT-DECLARATOR-LIST ;
SPECIFIER-QUALIFIER-LIST -> TYPE-SPECIFIER | TYPE-QUALIFIER | TYPE-SPECIFIER SPECIFIER-QUALIFIER-LIST  | TYPE-QUALIFIER SPECIFIER-QUALIFIER-LIST 
STRUCT-DECLARATOR-LIST -> STRUCT-DECLARATOR | STRUCT-DECLARATOR-LIST , STRUCT-DECLARATOR
STRUCT-DECLARATOR -> DECLARATOR | CONSTANT-EXPRESSION | DECLARATOR CONSTANT-EXPRESSION
ENUM-SPECIFIER -> enum { ENUMERATOR-LIST } | enum IDENTIFIER { ENUMERATOR-LIST } | enum IDENTIFIER
ENUMERATOR-LIST -> ENUMERATOR | ENUMERATOR-LIST , ENUMERATOR
ENUMERATOR -> ENUMERATION-CONSTANT | ENUMERATION-CONSTANT = CONSTANT-EXPRESSION
ENUMERATION-CONSTANT -> IDENTIFIER
TYPE-QUALIFIER-> const | volatile
DECLARATOR -> DIRECT-DECLARATOR -> POINTER DIRECT-DECLARATOR
DIRECT-DECLARATOR -> IDENTIFIER | ( DECLARATOR ) | DIRECT-DECLARATOR [ ] | DIRECT-DECLARATOR [ CONSTANT-EXPRESSION ] | DIRECT-DECLARATOR ( ) | DIRECT-DECLARATOR ( PARAMETER-TYPE-LIST ) | DIRECT-DECLARATOR ( IDENTIFIER-LIST )
POINTER -> * | * POINTER | * TYPE-QUALIFIER-LIST | * TYPE-QUALIFIER-LIST POINTER
TYPE-QUALIFIER-LIST -> TYPE-QUALIFIER | TYPE-QUALIFIER-LIST TYPE-QUALIFIER
PARAMETER-TYPE-LIST -> PARAMETER-LIST | PARAMETER-LIST , ...
PARAMETER-LIST -> PARAMETER-DECLARATION | PARAMETER-LIST , PARAMETER-DECLARATION
PARAMETER-DECLARATION -> DECLARATION-SPECIFIERS DECLARATOR | DECLARATION-SPECIFIERS | DECLARATION-SPECIFIERS ABSTRACT-DECLARATOR
IDENTIFIER-LIST -> IDENTIFIER | IDENTIFIER-LIST , IDENTIFIER
TYPE-NAME -> SPECIFIER-QUALIFIER-LIST | SPECIFIER-QUALIFIER-LIST ABSTRACT-DECLARATOR
ABSTRACT-DECLARATOR -> POINTER | DIRECT-ABSTRACT-DECLARATOR | POINTER DIRECT-ABSTRACT-DECLARATOR
DIRECT-ABSTRACT-DECLARATOR -> ( ABSTRACT-DECLARATOR ) | [ ] | [ CONSTANT-EXPRESSION ] | ( ) | ( PARAMETER-TYPE-LIST ) | DIRECT-ABSTRACT-DECLARATOR [ ] | DIRECT-ABSTRACT-DECLARATOR [ CONSTANT-EXPRESSION ] | DIRECT-ABSTRACT-DECLARATOR ( ) | DIRECT-ABSTRACT-DECLARATOR ( PARAMETER-TYPE-LIST )
TYPEDEF-NAME -> IDENTIFIER
INITIALIZER -> ASSIGNMENT-EXPRESSION | { INITIALIZER-LIST } | { INITIALIZER-LIST , }
INITIALIZER-LIST -> INITIALIZER | INITIALIZER-LIST , INITIALIZER
STATEMENT -> LABELED-STATEMENT | COMPOUND-STATEMENT | EXPRESSION-STATEMENT | SELECTION-STATEMENT | ITERATION-STATEMENT | JUMP-STATEMENT
LABELED-STATEMENT -> IDENTIFIER : STATEMENT | case CONSTANT-EXPRESSION : STATEMENT | default : STATEMENT
COMPOUND-STATEMENT -> { } | { DECLARATION-LIST } | { STATEMENT-LIST } | { DECLARATION-LIST STATEMENT-LIST }
DECLARATION-LIST -> DECLARATION | DECLARATION-LIST DECLARATION
STATEMENT-LIST -> STATEMENT | STATEMENT-LIST STATEMENT
EXPRESSION-STATEMENT -> ; | EXPRESSION ;
SELECTION-STATEMENT -> if ( EXPRESSION ) STATEMENT | if ( EXPRESSION ) STATEMENT else STATEMENT | switch ( EXPRESSION ) STATEMENT

ITERATION-STATEMENT -> while ( EXPRESSION ) STATEMENT | do STATEMENT while ( EXPRESSION ) ; | for (            ;            ;            ) STATEMENT | for (            ;            ; EXPRESSION ) STATEMENT | for (            ; EXPRESSION ;            ) STATEMENT | for (            ; EXPRESSION ; EXPRESSION ) STATEMENT | for ( EXPRESSION ;            ;            ) STATEMENT | for ( EXPRESSION ;            ; EXPRESSION ) STATEMENT | for ( EXPRESSION ; EXPRESSION ;            ) STATEMENT | for ( EXPRESSION ; EXPRESSION ; EXPRESSION ) STATEMENT
JUMP-STATEMENT -> goto IDENTIFIER ; | continue ; | break ; | return ; | return EXPRESSION ;
TRANSLATION-UNIT -> EXTERNAL-DECLARATION | TRANSLATION-UNIT EXTERNAL-DECLARATION
EXTERNAL-DECLARATION -> FUNCTION-DEFINITION | DECLARATION
FUNCTION-DEFINITION ->                        DECLARATOR                  COMPOUND-STATEMENT | DECLARATION-SPECIFIERS DECLARATOR                  COMPOUND-STATEMENT
                       | DECLARATOR DECLARATION-LIST COMPOUND-STATEMENT | DECLARATION-SPECIFIERS DECLARATOR DECLARATION-LIST COMPOUND-STATEMENT
